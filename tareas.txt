
PENDIENTE

Codificar un algoritmo hormiga que pruebe agregando cartas al mazo de Jugador para que logre un buen porcentaje de éxito (50%) probar lo mismo variando las estrategias.
Terminar de codificar el resto de las Madballs
Reinterpretar las madballs con habilidades para hacerlo más genérico
Dividir las zonas (zonaJuego es una sola, pero Zona descarte son dos)
Refactorizar Zona para que el llamado sea más fácil.
Armar la parte de UI
Levantar Proyecto UI/backend.

LISTO
Refactorizar Contadores para que sea más fácil su uso. LISTO
Codificar el turno Jugador. LISTO

Mejoras
Que todas las cartas sean de tipo Madballs
Quizás las cartas no deberían moverse de su zona hasta que se valide que pueden hacerlo. Ejemplo: cuando se roba una carta y no se puede jugar
se vuelve al tope del mazo.
Quizás ponerEnJuego y Jugar deberían ser métodos privados y desde fuera invocar a moverZona1Zona2 y de allí validar si eso puede ocurrir, para poder prevenir cualquier movimiento que, si no es válido haya que volver atrás (como carta al tope del mazo)
Crear diferentes clases de Main (con otro nombre: eje: optimizadorMazos, testeoPartida, etc con un main dentro cada una para correr más comodo la que uno quiera)

DISEÑO
Modificar el juego para 1 vs 1
Aumentar la cantidad de cartas que pueda jugar el jugador por turno.

Etapas:
1) Terminar modelado del juego
2) Terminar de diseñar las cartas.
3) Hacer corridas de prueba para evaluar mazo
4) Integración con la parte visual
5) Impresión y testeo en vivo
6) Diseño de cartas
7) Diseño de reglas
8) Diseño de caja
9) Impresión Real (Dos copias)
10) Diseño alternativo.